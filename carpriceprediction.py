# -*- coding: utf-8 -*-
"""CarPricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MILV2X_H0hPJMNQ2ELlVPaWyW-sKJGlF

Importing the dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
import pickle

"""Loading the dataset"""

car=pd.read_csv('/content/quikr_car.csv')

"""Removing non numeric data in year column and converting object to int"""

car=car[car['year'].str.isnumeric()]
car['year'] = car['year'].astype(int)

"""Removing "Ask For Price"  in price column and converting object to int"""

car=car[car['Price']!="Ask For Price"]
car['Price'] = car['Price'].str.replace(",","").astype(int)
car=car[car['Price']<6e6].reset_index(drop=True)

"""Removing non numeric data and commas  in kms_driven column and converting object to int"""

car['kms_driven']=car['kms_driven'].str.split(' ').str.get(0).str.replace(',','')
car=car[car['kms_driven'].str.isnumeric()]
car['kms_driven']=car['kms_driven'].astype(int)

"""Removes rows with missing fuel_type values"""

car=car[~car['fuel_type'].isna()]

"""Selecting only the first three words from car name"""

car['name']=car['name'].str.split(' ').str.slice(0,3).str.join(' ')

"""Reseting the index after cleaning the data"""

car=car.reset_index(drop=True)
car.to_csv('Cleaned_car.csv')

"""Assigning dependent and independent variables"""

x=car.drop(columns='Price')
y=car['Price']

"""Splitting the data frame into train and test data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=661)

""" Instance that learns the unique categories in each column"""

ohe=OneHotEncoder()
ohe.fit(x[['name','company','fuel_type']])

"""Applying different transformations to different columns of a dataset"""

column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),remainder='passthrough')

"""Training the model"""

lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(x_train,y_train)
y_pred=pipe.predict(x_test)
r2_score(y_test,y_pred)

"""Installing pickle"""

!pip install pickle-mixin

"""Saves the trained machine learning model"""

pickle.dump(pipe,open('LinearRegressionModel.pkl','wb'))